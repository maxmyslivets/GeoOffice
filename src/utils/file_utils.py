import os
import json
from typing import Dict, Any, Optional
from pathlib import Path
from src.utils.logger_config import get_logger, log_exception

logger = get_logger("utils.files")


class FileUtils:
    """
    –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–∞–º–∏: —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ, –∑–∞–≥—Ä—É–∑–∫–∞, –ø—Ä–æ–≤–µ—Ä–∫–∞, —Å–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–∞—Ö.
    """
    
    @staticmethod
    @log_exception
    def save_json(data: Dict[str, Any], filename: str) -> bool:
        """
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ JSON-—Ñ–∞–π–ª.
        :param data: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏
        :param filename: –ò–º—è —Ñ–∞–π–ª–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        :return: True, –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ, –∏–Ω–∞—á–µ False
        """
        logger.debug(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ JSON —Ñ–∞–π–ª–∞: {filename}")
        try:
            with open(filename, 'w', encoding='utf-8') as f:
                json.dump(data, f, ensure_ascii=False, indent=2)
            logger.info(f"‚úÖ JSON —Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {filename}")
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {filename}: {str(e)}")
            return False
    
    @staticmethod
    @log_exception
    def load_json(filename: str) -> Optional[Dict[str, Any]]:
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ JSON-—Ñ–∞–π–ª–∞.
        :param filename: –ò–º—è —Ñ–∞–π–ª–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
        :return: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–ª–∏ None, –µ—Å–ª–∏ –æ—à–∏–±–∫–∞
        """
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ JSON —Ñ–∞–π–ª–∞"""
        logger.debug(f"üìÇ –ó–∞–≥—Ä—É–∑–∫–∞ JSON —Ñ–∞–π–ª–∞: {filename}")
        try:
            if os.path.exists(filename):
                with open(filename, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                    logger.info(f"‚úÖ JSON —Ñ–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω: {filename}")
                    return data
            else:
                logger.warning(f"‚ö†Ô∏è –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {filename}")
                return None
        except json.JSONDecodeError as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON —Ñ–∞–π–ª–∞ {filename}: {str(e)}")
            return None
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ {filename}: {str(e)}")
            return None
    
    @staticmethod
    @log_exception
    def ensure_directory(path: str) -> bool:
        """–°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"""
        logger.debug(f"üìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞/—Å–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {path}")
        try:
            Path(path).mkdir(parents=True, exist_ok=True)
            logger.debug(f"‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –≥–æ—Ç–æ–≤–∞: {path}")
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ {path}: {str(e)}")
            return False
    
    @staticmethod
    @log_exception
    def get_file_extension(filename: str) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ–∞–π–ª–∞"""
        ext = os.path.splitext(filename)[1].lower()
        logger.debug(f"üîç –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {filename}: {ext}")
        return ext
    
    @staticmethod
    @log_exception
    def is_valid_file(filename: str, allowed_extensions: list) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Ñ–∞–π–ª–∞ –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é"""
        ext = FileUtils.get_file_extension(filename)
        logger.debug(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Ñ–∞–π–ª–∞ {filename} –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é: {ext in allowed_extensions}")
        return ext in allowed_extensions
    
    @staticmethod
    @log_exception
    def file_exists(file_path: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞"""
        exists = os.path.exists(file_path)
        logger.debug(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞ {file_path}: {'—Å—É—â–µ—Å—Ç–≤—É–µ—Ç' if exists else '–Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç'}")
        return exists
    
    @staticmethod
    @log_exception
    def get_file_size(file_path: str) -> int:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞ –≤ –±–∞–π—Ç–∞—Ö"""
        try:
            size = os.path.getsize(file_path)
            logger.debug(f"üìè –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ {file_path}: {size} –±–∞–π—Ç")
            return size
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞ {file_path}: {str(e)}")
            return 0 