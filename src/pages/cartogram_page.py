import flet as ft
from .base_page import BasePage
from src.services.cartogram_service import CartogramService
from src.models.cartogram_models import CartogramData
import logging
from shapely.geometry import Polygon, MultiPolygon
import os
from datetime import datetime
from src.utils.logger_config import log_exception


class CartogramPage(BasePage):
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ä—Ç–æ–≥—Ä–∞–º–º"""
    
    def __init__(self, app):
        super().__init__(app)
        self.logger.info("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∫–∞—Ä—Ç–æ–≥—Ä–∞–º–º—ã")
        self.cartogram_service = CartogramService()
        self.current_cartogram = None
        self.dxf_file_path = None
        self.file_picker = ft.FilePicker(on_result=self.on_file_picked)
        self.save_picker = ft.FilePicker(on_result=self.on_save_picked)
        self.grid_size_field = ft.TextField(
            label="–†–∞–∑–º–µ—Ä —è—á–µ–π–∫–∏ —Å–µ—Ç–∫–∏ (–º)",
            keyboard_type=ft.KeyboardType.NUMBER,
            hint_text="250",
            value="250"
        )
        self.coordinate_system_dropdown = ft.Dropdown(
            label="–°–∏—Å—Ç–µ–º–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç",
            options=[
                ft.dropdown.Option("–°–ö63"),
                ft.dropdown.Option("–ú–°–ö")
            ],
            value="–°–ö63",
            on_change=self.on_coordinate_system_changed
        )
        self.info_text = ft.Text("", size=14)
        self.nomenclature_text = ft.TextField(
            label="–°–ø–∏—Å–æ–∫ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä",
            multiline=True,
            min_lines=10,
            max_lines=15,
            read_only=True,
            expand=True
        )
        self.log_text = ft.TextField(
            label="–õ–æ–≥–∏",
            multiline=True,
            min_lines=8,
            max_lines=12,
            read_only=True,
            expand=True
        )
        self.controls = [self.file_picker, self.save_picker]
        self.logger.info("‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∫–∞—Ä—Ç–æ–≥—Ä–∞–º–º—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

    def get_content(self):
        # self.logger.debug("üìÑ –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∫–∞—Ä—Ç–æ–≥—Ä–∞–º–º—ã")
        # return ft.Column([
        #     *self.controls,
        #     ft.Text("–°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ–≥—Ä–∞–º–º—ã", size=24, weight=ft.FontWeight.BOLD),
        #     ft.Divider(height=20),
        #     ft.Row([
        #         ft.ElevatedButton("–ó–∞–≥—Ä—É–∑–∏—Ç—å DXF", icon=ft.Icons.FILE_OPEN, on_click=self.open_file_picker),
        #         ft.ElevatedButton("–°–æ–∑–¥–∞—Ç—å —Å–µ—Ç–∫—É", icon=ft.Icons.GRID_ON, on_click=self.create_grid),
        #         ft.ElevatedButton("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ DXF", icon=ft.Icons.SAVE, on_click=self.open_save_picker),
        #         ft.ElevatedButton("–û—á–∏—Å—Ç–∏—Ç—å", icon=ft.Icons.CLEAR, on_click=self.clear_all),
        #     ]),
        #     ft.Divider(height=20),
        #     ft.Card(
        #         content=ft.Container(
        #             content=ft.Column([
        #                 ft.Text("–ù–∞—Å—Ç—Ä–æ–π–∫–∏", size=18, weight=ft.FontWeight.BOLD),
        #                 ft.Row([
        #                     self.grid_size_field,
        #                     self.coordinate_system_dropdown,
        #                 ]),
        #             ]),
        #             padding=20
        #         )
        #     ),
        #     ft.Divider(height=20),
        #     ft.Row([
        #         ft.Column([
        #             ft.Text("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", size=18, weight=ft.FontWeight.BOLD),
        #             self.info_text,
        #             ft.Divider(height=20),
        #             ft.Text("–õ–æ–≥–∏", size=16, weight=ft.FontWeight.BOLD),
        #             self.log_text,
        #         ], expand=True),
        #         ft.VerticalDivider(width=1),
        #         ft.Column([
        #             ft.Text("–°–ø–∏—Å–æ–∫ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä", size=18, weight=ft.FontWeight.BOLD),
        #             self.nomenclature_text,
        #         ], expand=True),
        #     ], expand=True),
        # ])
        return ft.Text("–°—Ç—Ä–∞–Ω–∏—Ü–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...", color=ft.Colors.RED, size=20)

    @log_exception
    def open_file_picker(self, e=None):
        self.logger.info("üìÇ –û—Ç–∫—Ä—ã—Ç–∏–µ –¥–∏–∞–ª–æ–≥–∞ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞ DXF")
        self.file_picker.pick_files(allow_multiple=False, allowed_extensions=["dxf"])

    @log_exception
    def on_file_picked(self, e: ft.FilePickerResultEvent):
        if e.files and len(e.files) > 0:
            self.dxf_file_path = e.files[0].path
            self.logger.info(f"üìÅ –í—ã–±—Ä–∞–Ω —Ñ–∞–π–ª: {os.path.basename(self.dxf_file_path)}")
            try:
                self.logger.debug("üîç –ü–∞—Ä—Å–∏–Ω–≥ DXF —Ñ–∞–π–ª–∞")
                multi_polygon = self.cartogram_service.parse_dxf_file(self.dxf_file_path)
                bounds = multi_polygon.bounds
                self.logger.debug(f"üìç –ì—Ä–∞–Ω–∏—Ü—ã –ø–æ–ª–∏–≥–æ–Ω–∞: {bounds}")
                
                self.logger.debug("üó∫Ô∏è –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç")
                coordinate_system = self.cartogram_service.detect_coordinate_system(bounds[0], bounds[1])
                self.cartogram_service.set_coordinate_system(coordinate_system)
                self.coordinate_system_dropdown.value = coordinate_system
                
                self.logger.debug("üìä –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –∫–∞—Ä—Ç–æ–≥—Ä–∞–º–º—ã")
                self.current_cartogram = CartogramData(
                    multi_polygon=multi_polygon,
                    grid_cells=[],
                    nomenclature_list=[],
                    coordinate_system=coordinate_system
                )
                
                self.update_info()
                self.log_message(f"–ó–∞–≥—Ä—É–∂–µ–Ω —Ñ–∞–π–ª: {os.path.basename(self.dxf_file_path)} (—Å–∏—Å—Ç–µ–º–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç: {coordinate_system})")
                self.app.show_info("–§–∞–π–ª DXF –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
                self.update_page()
                
                self.logger.info(f"‚úÖ –§–∞–π–ª DXF —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω: {os.path.basename(self.dxf_file_path)}")
            except Exception as ex:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞: {str(ex)}")
                self.log_message(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞: {str(ex)}")
                self.app.show_error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞: {str(ex)}")
        else:
            self.logger.info("‚ùå –§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω")

    @log_exception
    def create_grid(self, e=None):
        try:
            if not self.current_cartogram:
                self.logger.warning("‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞—Ç—å —Å–µ—Ç–∫—É –±–µ–∑ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞")
                self.app.show_warning("–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ DXF —Ñ–∞–π–ª")
                return
                
            grid_size = int(self.grid_size_field.value or 250)
            self.logger.info(f"üî≤ –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Ç–∫–∏ —Å —Ä–∞–∑–º–µ—Ä–æ–º —è—á–µ–π–∫–∏: {grid_size} –º")
            
            self.logger.debug("üìê –°–æ–∑–¥–∞–Ω–∏–µ —è—á–µ–µ–∫ —Å–µ—Ç–∫–∏")
            grid_cells = self.cartogram_service.create_grid(
                self.current_cartogram.multi_polygon, grid_size)
            
            self.logger.debug("üìã –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä")
            nomenclature_list = self.cartogram_service.get_nomenclature_list(grid_cells)
            
            self.current_cartogram.grid_cells = grid_cells
            self.current_cartogram.nomenclature_list = nomenclature_list
            self.current_cartogram.grid_size = grid_size
            
            self.update_info()
            self.update_nomenclature_list()
            self.log_message(f"–°–æ–∑–¥–∞–Ω–∞ —Å–µ—Ç–∫–∞: {len(grid_cells)} —è—á–µ–µ–∫")
            self.app.show_info("–°–µ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
            self.update_page()
            
            self.logger.info(f"‚úÖ –°–µ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ: {len(grid_cells)} —è—á–µ–µ–∫, {len(nomenclature_list)} –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä")
        except Exception as ex:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–µ—Ç–∫–∏: {str(ex)}")
            self.log_message(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–µ—Ç–∫–∏: {str(ex)}")
            self.app.show_error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–µ—Ç–∫–∏: {str(ex)}")

    @log_exception
    def open_save_picker(self, e=None):
        self.logger.info("üíæ –û—Ç–∫—Ä—ã—Ç–∏–µ –¥–∏–∞–ª–æ–≥–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞")
        self.save_picker.save_file(file_name="cartogram.dxf", allowed_extensions=["dxf"])

    @log_exception
    def on_save_picked(self, e: ft.FilePickerResultEvent):
        if e.path and self.current_cartogram and self.current_cartogram.grid_cells:
            self.logger.info(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–µ—Ç–∫–∏ –≤ —Ñ–∞–π–ª: {os.path.basename(e.path)}")
            try:
                self.logger.debug("üìù –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–µ—Ç–∫–∏ –≤ DXF")
                self.cartogram_service.save_grid_to_dxf(
                    self.current_cartogram.grid_cells,
                    self.current_cartogram.multi_polygon,
                    e.path
                )
                self.log_message(f"–°–µ—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ —Ñ–∞–π–ª: {os.path.basename(e.path)}")
                self.app.show_info(f"–°–µ—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ —Ñ–∞–π–ª: {os.path.basename(e.path)}")
                self.update_page()
                
                self.logger.info(f"‚úÖ –°–µ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {os.path.basename(e.path)}")
            except Exception as ex:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {str(ex)}")
                self.log_message(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {str(ex)}")
                self.app.show_error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {str(ex)}")
        else:
            self.logger.warning("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
            self.app.show_warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è!")

    @log_exception
    def clear_all(self, e=None):
        self.logger.info("üßπ –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö")
        self.current_cartogram = None
        self.dxf_file_path = None
        self.info_text.value = ""
        self.nomenclature_text.value = ""
        self.log_message("–í—Å–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã")
        self.update_page()
        self.logger.info("‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã")

    @log_exception
    def on_coordinate_system_changed(self, e=None):
        if e and e.control.value:
            try:
                self.logger.info(f"üó∫Ô∏è –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –Ω–∞: {e.control.value}")
                self.cartogram_service.set_coordinate_system(e.control.value)
                if self.current_cartogram:
                    self.current_cartogram.coordinate_system = e.control.value
                self.log_message(f"–°–∏—Å—Ç–µ–º–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: {e.control.value}")
                self.update_page()
                self.logger.info(f"‚úÖ –°–∏—Å—Ç–µ–º–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –∏–∑–º–µ–Ω–µ–Ω–∞: {e.control.value}")
            except Exception as ex:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–∏—Å—Ç–µ–º—ã –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç: {str(ex)}")
                self.app.show_error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–∏—Å—Ç–µ–º—ã –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç: {str(ex)}")

    @log_exception
    def update_info(self):
        if self.current_cartogram:
            self.logger.debug("üìä –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞—Ä—Ç–æ–≥—Ä–∞–º–º–µ")
            bounds = self.current_cartogram.get_bounds()
            info = f"""
üìä –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ö–ê–†–¢–û–ì–†–ê–ú–ú–ï

üó∫Ô∏è –°–∏—Å—Ç–µ–º–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç: {self.current_cartogram.coordinate_system}
üìê –†–∞–∑–º–µ—Ä —è—á–µ–π–∫–∏: {self.current_cartogram.grid_size} –º
üî≤ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —è—á–µ–µ–∫: {self.current_cartogram.get_cell_count()}
üìã –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä: {self.current_cartogram.get_nomenclature_count()}

üìç –ì—Ä–∞–Ω–∏—Ü—ã:
   X: {bounds[0]:.2f} - {bounds[2]:.2f}
   Y: {bounds[1]:.2f} - {bounds[3]:.2f}
            """.strip()
            self.info_text.value = info
            self.logger.debug("‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
        else:
            self.info_text.value = "–ù–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"
            self.logger.debug("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏")

    @log_exception
    def update_nomenclature_list(self):
        if self.current_cartogram and self.current_cartogram.nomenclature_list:
            self.logger.debug("üìã –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä")
            nomenclature_text = "\n".join([
                item.full_nomenclature for item in self.current_cartogram.nomenclature_list
            ])
            self.nomenclature_text.value = nomenclature_text
            self.logger.debug(f"‚úÖ –°–ø–∏—Å–æ–∫ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä –æ–±–Ω–æ–≤–ª–µ–Ω: {len(self.current_cartogram.nomenclature_list)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
        else:
            self.nomenclature_text.value = "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞—Ö"
            self.logger.debug("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞—Ö")

    @log_exception
    def log_message(self, message: str):
        current_logs = self.log_text.value or ""
        new_log = f"[{self.get_current_time()}] {message}"
        self.log_text.value = f"{current_logs}\n{new_log}" if current_logs else new_log
        self.logger.debug(f"üìù UI –ª–æ–≥: {message}")

    def get_current_time(self) -> str:
        return datetime.now().strftime("%H:%M:%S") 